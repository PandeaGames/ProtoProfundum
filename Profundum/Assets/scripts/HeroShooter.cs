//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

	public class HeroShooter:Shooter
	{
		private ShootTargetting _targetting;
		public GameObject anchor;
		public int recoverDelay = 5;
		private bool _canShoot = false;
		private float _timeStamp = 0;
		public HeroShooter ()
		{
		}
		void Start()
		{
			_targetting = FindObjectOfType<ShootTargetting> ();
			SendMessage("Audio_LightHum");
		}
		public override void Update()
		{
			base.Update ();
            bool tmpCanShoot = _canShoot;
			_canShoot = Time.time > _timeStamp;
            if(_canShoot && !tmpCanShoot)
            {
                SendMessage("Audio_Shoot_Return");
            }
		}
		protected override Quaternion getProtectileRotation()
		{
			spawn.transform.LookAt (_targetting.transform.position);
			return base.getProtectileRotation ();
		}
		protected override void Shoot()
		{
			if (_canShoot) {
                SendMessage("Audio_Shoot");
				base.Shoot ();
				_timeStamp = Time.time + recoverDelay;
            }
            else
            {
                LightTargetDisplay display = FindObjectOfType<LightTargetDisplay>();
                if (display)
                {
                    display.SendMessage("Audio_Shoot_Fail");
                }
                SendMessage("Audio_Shoot_Fail");
            }
		}
		public bool CanShoot()
		{
			return _canShoot;
		}
		public float GetRecoveringProgress()
		{
			if (_canShoot)
				return 1;
		return 1 - (_timeStamp - Time.time) / recoverDelay;
		}
}


